-module(http_req).

-include_lib("proper/include/proper.hrl").
%-include_lib("eqc/include/eqc.hrl").

-define(CallerID,alpha).
-define(PrivateKey,tjmzCFRyi8gGsjqEqiICoo02qUmhR6Z2HGrNHNcF).

-compile(export_all).


start(_Place,_NoObjects)->
    inets:start(),
    Unique = get_Unique(),
    Time = get_time(),
    Hash = io_lib:format("~p~p~p~s",[?CallerID,Time,?PrivateKey,Unique]),
    Req_a = io_lib:format("http://api.booli.se/listings?q=GÃ–TEBORG&limit=10&offset=0&callerId=~p&time=~p&unique=~s&Hash=~s",[?CallerID,Time,Unique,get_hash(Hash)]),
    Req = Req_a,
%    httpc:request(Req).
    io:format("~s~n",[Req]).

insert_esc_char([])->
    [];
insert_esc_char([H|T]) ->
    insert_esc_char([H|T],[]).

insert_esc_char([],List)->
    lists:reverse(List);
insert_esc_char([34|T],List) ->
    TList = [92|List],
    insert_esc_char(T,[34|TList]);
insert_esc_char([H|T],List) ->
    insert_esc_char(T,[H|List]).

%% get_hash(list::integers()) ---> digest::binary() | error
get_hash(Data)->
    crypto:sha(Data).

%% 1 MegaSec = 1 000 000 Seconds, 1 000 000 MilliSec = 1 Sec
%% need to re implement with Day Light saving, UTC corrected, following day light specification.
get_time()->
    {MegS,S,MiS} = now(),
    MegS*1000000 + S + MiS div 1000000.

get_Unique()->
   random_string(16).

%%%%%%%%%%%%% Internal Functions

%% Not clear weather it should be only alphanumeric or can include all ASCII values
random_string(0) ->
    [];

random_string(Length) -> 
	    [random_char() | random_string(Length-1)].

random_char() -> random:uniform(95) + 31 .
    
%%%%%%%%%%%%%% Test Functions

prop_test_get_hash() ->
   ?FORALL(Data,list(byte()),get_hash(Data)==crypto:sha(Data)).

prop_test_length_get_unique() ->
    ?FORALL(Random,get_Unique(),length(Random)<17).

%% Not working, ask thomas or hans
%prop_test_random_string()->
%    ?FORALL(Random,random_string(integer(1,50)),is_list(Random)==true).
%    ?FORALL(Random,random_string(int()),is_list(Random)).

